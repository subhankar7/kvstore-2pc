// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend.proto

#ifndef PROTOBUF_backend_2eproto__INCLUDED
#define PROTOBUF_backend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace backend {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_backend_2eproto();
void protobuf_AssignDesc_backend_2eproto();
void protobuf_ShutdownFile_backend_2eproto();

class AbortReply;
class AbortRequest;
class BackendFetchReply;
class BackendFetchRequest;
class CommitReply;
class CommitRequest;
class PrepareReply;
class PrepareRequest;

// ===================================================================

class BackendFetchRequest : public ::google::protobuf::Message {
 public:
  BackendFetchRequest();
  virtual ~BackendFetchRequest();

  BackendFetchRequest(const BackendFetchRequest& from);

  inline BackendFetchRequest& operator=(const BackendFetchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackendFetchRequest& default_instance();

  void Swap(BackendFetchRequest* other);

  // implements Message ----------------------------------------------

  inline BackendFetchRequest* New() const { return New(NULL); }

  BackendFetchRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackendFetchRequest& from);
  void MergeFrom(const BackendFetchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackendFetchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:backend.BackendFetchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static BackendFetchRequest* default_instance_;
};
// -------------------------------------------------------------------

class BackendFetchReply : public ::google::protobuf::Message {
 public:
  BackendFetchReply();
  virtual ~BackendFetchReply();

  BackendFetchReply(const BackendFetchReply& from);

  inline BackendFetchReply& operator=(const BackendFetchReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackendFetchReply& default_instance();

  void Swap(BackendFetchReply* other);

  // implements Message ----------------------------------------------

  inline BackendFetchReply* New() const { return New(NULL); }

  BackendFetchReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackendFetchReply& from);
  void MergeFrom(const BackendFetchReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackendFetchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // optional string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional int32 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional bytes buf = 4;
  void clear_buf();
  static const int kBufFieldNumber = 4;
  const ::std::string& buf() const;
  void set_buf(const ::std::string& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  ::std::string* mutable_buf();
  ::std::string* release_buf();
  void set_allocated_buf(::std::string* buf);

  // @@protoc_insertion_point(class_scope:backend.BackendFetchReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::internal::ArenaStringPtr buf_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static BackendFetchReply* default_instance_;
};
// -------------------------------------------------------------------

class PrepareRequest : public ::google::protobuf::Message {
 public:
  PrepareRequest();
  virtual ~PrepareRequest();

  PrepareRequest(const PrepareRequest& from);

  inline PrepareRequest& operator=(const PrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareRequest& default_instance();

  void Swap(PrepareRequest* other);

  // implements Message ----------------------------------------------

  inline PrepareRequest* New() const { return New(NULL); }

  PrepareRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrepareRequest& from);
  void MergeFrom(const PrepareRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrepareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  ::google::protobuf::uint64 txid() const;
  void set_txid(::google::protobuf::uint64 value);

  // optional string op = 2;
  void clear_op();
  static const int kOpFieldNumber = 2;
  const ::std::string& op() const;
  void set_op(const ::std::string& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  ::std::string* mutable_op();
  ::std::string* release_op();
  void set_allocated_op(::std::string* op);

  // optional string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional uint32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // optional bytes buf = 5;
  void clear_buf();
  static const int kBufFieldNumber = 5;
  const ::std::string& buf() const;
  void set_buf(const ::std::string& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  ::std::string* mutable_buf();
  ::std::string* release_buf();
  void set_allocated_buf(::std::string* buf);

  // @@protoc_insertion_point(class_scope:backend.PrepareRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 txid_;
  ::google::protobuf::internal::ArenaStringPtr op_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr buf_;
  ::google::protobuf::uint32 size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static PrepareRequest* default_instance_;
};
// -------------------------------------------------------------------

class PrepareReply : public ::google::protobuf::Message {
 public:
  PrepareReply();
  virtual ~PrepareReply();

  PrepareReply(const PrepareReply& from);

  inline PrepareReply& operator=(const PrepareReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareReply& default_instance();

  void Swap(PrepareReply* other);

  // implements Message ----------------------------------------------

  inline PrepareReply* New() const { return New(NULL); }

  PrepareReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrepareReply& from);
  void MergeFrom(const PrepareReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrepareReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  ::google::protobuf::uint64 txid() const;
  void set_txid(::google::protobuf::uint64 value);

  // optional string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:backend.PrepareReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 txid_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static PrepareReply* default_instance_;
};
// -------------------------------------------------------------------

class CommitRequest : public ::google::protobuf::Message {
 public:
  CommitRequest();
  virtual ~CommitRequest();

  CommitRequest(const CommitRequest& from);

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitRequest& default_instance();

  void Swap(CommitRequest* other);

  // implements Message ----------------------------------------------

  inline CommitRequest* New() const { return New(NULL); }

  CommitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitRequest& from);
  void MergeFrom(const CommitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  ::google::protobuf::uint64 txid() const;
  void set_txid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:backend.CommitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 txid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static CommitRequest* default_instance_;
};
// -------------------------------------------------------------------

class CommitReply : public ::google::protobuf::Message {
 public:
  CommitReply();
  virtual ~CommitReply();

  CommitReply(const CommitReply& from);

  inline CommitReply& operator=(const CommitReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitReply& default_instance();

  void Swap(CommitReply* other);

  // implements Message ----------------------------------------------

  inline CommitReply* New() const { return New(NULL); }

  CommitReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitReply& from);
  void MergeFrom(const CommitReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  ::google::protobuf::uint64 txid() const;
  void set_txid(::google::protobuf::uint64 value);

  // optional string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:backend.CommitReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 txid_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static CommitReply* default_instance_;
};
// -------------------------------------------------------------------

class AbortRequest : public ::google::protobuf::Message {
 public:
  AbortRequest();
  virtual ~AbortRequest();

  AbortRequest(const AbortRequest& from);

  inline AbortRequest& operator=(const AbortRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AbortRequest& default_instance();

  void Swap(AbortRequest* other);

  // implements Message ----------------------------------------------

  inline AbortRequest* New() const { return New(NULL); }

  AbortRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbortRequest& from);
  void MergeFrom(const AbortRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AbortRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  ::google::protobuf::uint64 txid() const;
  void set_txid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:backend.AbortRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 txid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static AbortRequest* default_instance_;
};
// -------------------------------------------------------------------

class AbortReply : public ::google::protobuf::Message {
 public:
  AbortReply();
  virtual ~AbortReply();

  AbortReply(const AbortReply& from);

  inline AbortReply& operator=(const AbortReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AbortReply& default_instance();

  void Swap(AbortReply* other);

  // implements Message ----------------------------------------------

  inline AbortReply* New() const { return New(NULL); }

  AbortReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbortReply& from);
  void MergeFrom(const AbortReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AbortReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  ::google::protobuf::uint64 txid() const;
  void set_txid(::google::protobuf::uint64 value);

  // optional string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:backend.AbortReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 txid_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_backend_2eproto();
  friend void protobuf_AssignDesc_backend_2eproto();
  friend void protobuf_ShutdownFile_backend_2eproto();

  void InitAsDefaultInstance();
  static AbortReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BackendFetchRequest

// optional string path = 1;
inline void BackendFetchRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BackendFetchRequest::path() const {
  // @@protoc_insertion_point(field_get:backend.BackendFetchRequest.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackendFetchRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.BackendFetchRequest.path)
}
inline void BackendFetchRequest::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.BackendFetchRequest.path)
}
inline void BackendFetchRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.BackendFetchRequest.path)
}
inline ::std::string* BackendFetchRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:backend.BackendFetchRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackendFetchRequest::release_path() {
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackendFetchRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:backend.BackendFetchRequest.path)
}

// -------------------------------------------------------------------

// BackendFetchReply

// optional int32 error = 1;
inline void BackendFetchReply::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 BackendFetchReply::error() const {
  // @@protoc_insertion_point(field_get:backend.BackendFetchReply.error)
  return error_;
}
inline void BackendFetchReply::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:backend.BackendFetchReply.error)
}

// optional string reason = 2;
inline void BackendFetchReply::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BackendFetchReply::reason() const {
  // @@protoc_insertion_point(field_get:backend.BackendFetchReply.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackendFetchReply::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.BackendFetchReply.reason)
}
inline void BackendFetchReply::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.BackendFetchReply.reason)
}
inline void BackendFetchReply::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.BackendFetchReply.reason)
}
inline ::std::string* BackendFetchReply::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:backend.BackendFetchReply.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackendFetchReply::release_reason() {
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackendFetchReply::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:backend.BackendFetchReply.reason)
}

// optional int32 size = 3;
inline void BackendFetchReply::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 BackendFetchReply::size() const {
  // @@protoc_insertion_point(field_get:backend.BackendFetchReply.size)
  return size_;
}
inline void BackendFetchReply::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:backend.BackendFetchReply.size)
}

// optional bytes buf = 4;
inline void BackendFetchReply::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BackendFetchReply::buf() const {
  // @@protoc_insertion_point(field_get:backend.BackendFetchReply.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackendFetchReply::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.BackendFetchReply.buf)
}
inline void BackendFetchReply::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.BackendFetchReply.buf)
}
inline void BackendFetchReply::set_buf(const void* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.BackendFetchReply.buf)
}
inline ::std::string* BackendFetchReply::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:backend.BackendFetchReply.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackendFetchReply::release_buf() {
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackendFetchReply::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:backend.BackendFetchReply.buf)
}

// -------------------------------------------------------------------

// PrepareRequest

// optional uint64 txid = 1;
inline void PrepareRequest::clear_txid() {
  txid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRequest::txid() const {
  // @@protoc_insertion_point(field_get:backend.PrepareRequest.txid)
  return txid_;
}
inline void PrepareRequest::set_txid(::google::protobuf::uint64 value) {
  
  txid_ = value;
  // @@protoc_insertion_point(field_set:backend.PrepareRequest.txid)
}

// optional string op = 2;
inline void PrepareRequest::clear_op() {
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareRequest::op() const {
  // @@protoc_insertion_point(field_get:backend.PrepareRequest.op)
  return op_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_op(const ::std::string& value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.PrepareRequest.op)
}
inline void PrepareRequest::set_op(const char* value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.PrepareRequest.op)
}
inline void PrepareRequest::set_op(const char* value, size_t size) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.PrepareRequest.op)
}
inline ::std::string* PrepareRequest::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:backend.PrepareRequest.op)
  return op_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareRequest::release_op() {
  
  return op_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:backend.PrepareRequest.op)
}

// optional string path = 3;
inline void PrepareRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareRequest::path() const {
  // @@protoc_insertion_point(field_get:backend.PrepareRequest.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.PrepareRequest.path)
}
inline void PrepareRequest::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.PrepareRequest.path)
}
inline void PrepareRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.PrepareRequest.path)
}
inline ::std::string* PrepareRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:backend.PrepareRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareRequest::release_path() {
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:backend.PrepareRequest.path)
}

// optional uint32 size = 4;
inline void PrepareRequest::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 PrepareRequest::size() const {
  // @@protoc_insertion_point(field_get:backend.PrepareRequest.size)
  return size_;
}
inline void PrepareRequest::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:backend.PrepareRequest.size)
}

// optional bytes buf = 5;
inline void PrepareRequest::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareRequest::buf() const {
  // @@protoc_insertion_point(field_get:backend.PrepareRequest.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.PrepareRequest.buf)
}
inline void PrepareRequest::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.PrepareRequest.buf)
}
inline void PrepareRequest::set_buf(const void* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.PrepareRequest.buf)
}
inline ::std::string* PrepareRequest::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:backend.PrepareRequest.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareRequest::release_buf() {
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareRequest::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:backend.PrepareRequest.buf)
}

// -------------------------------------------------------------------

// PrepareReply

// optional uint64 txid = 1;
inline void PrepareReply::clear_txid() {
  txid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareReply::txid() const {
  // @@protoc_insertion_point(field_get:backend.PrepareReply.txid)
  return txid_;
}
inline void PrepareReply::set_txid(::google::protobuf::uint64 value) {
  
  txid_ = value;
  // @@protoc_insertion_point(field_set:backend.PrepareReply.txid)
}

// optional string result = 2;
inline void PrepareReply::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareReply::result() const {
  // @@protoc_insertion_point(field_get:backend.PrepareReply.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareReply::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.PrepareReply.result)
}
inline void PrepareReply::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.PrepareReply.result)
}
inline void PrepareReply::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.PrepareReply.result)
}
inline ::std::string* PrepareReply::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:backend.PrepareReply.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareReply::release_result() {
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareReply::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:backend.PrepareReply.result)
}

// -------------------------------------------------------------------

// CommitRequest

// optional uint64 txid = 1;
inline void CommitRequest::clear_txid() {
  txid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommitRequest::txid() const {
  // @@protoc_insertion_point(field_get:backend.CommitRequest.txid)
  return txid_;
}
inline void CommitRequest::set_txid(::google::protobuf::uint64 value) {
  
  txid_ = value;
  // @@protoc_insertion_point(field_set:backend.CommitRequest.txid)
}

// -------------------------------------------------------------------

// CommitReply

// optional uint64 txid = 1;
inline void CommitReply::clear_txid() {
  txid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommitReply::txid() const {
  // @@protoc_insertion_point(field_get:backend.CommitReply.txid)
  return txid_;
}
inline void CommitReply::set_txid(::google::protobuf::uint64 value) {
  
  txid_ = value;
  // @@protoc_insertion_point(field_set:backend.CommitReply.txid)
}

// optional string result = 2;
inline void CommitReply::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommitReply::result() const {
  // @@protoc_insertion_point(field_get:backend.CommitReply.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitReply::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.CommitReply.result)
}
inline void CommitReply::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.CommitReply.result)
}
inline void CommitReply::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.CommitReply.result)
}
inline ::std::string* CommitReply::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:backend.CommitReply.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitReply::release_result() {
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitReply::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:backend.CommitReply.result)
}

// -------------------------------------------------------------------

// AbortRequest

// optional uint64 txid = 1;
inline void AbortRequest::clear_txid() {
  txid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AbortRequest::txid() const {
  // @@protoc_insertion_point(field_get:backend.AbortRequest.txid)
  return txid_;
}
inline void AbortRequest::set_txid(::google::protobuf::uint64 value) {
  
  txid_ = value;
  // @@protoc_insertion_point(field_set:backend.AbortRequest.txid)
}

// -------------------------------------------------------------------

// AbortReply

// optional uint64 txid = 1;
inline void AbortReply::clear_txid() {
  txid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AbortReply::txid() const {
  // @@protoc_insertion_point(field_get:backend.AbortReply.txid)
  return txid_;
}
inline void AbortReply::set_txid(::google::protobuf::uint64 value) {
  
  txid_ = value;
  // @@protoc_insertion_point(field_set:backend.AbortReply.txid)
}

// optional string result = 2;
inline void AbortReply::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AbortReply::result() const {
  // @@protoc_insertion_point(field_get:backend.AbortReply.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbortReply::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.AbortReply.result)
}
inline void AbortReply::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.AbortReply.result)
}
inline void AbortReply::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.AbortReply.result)
}
inline ::std::string* AbortReply::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:backend.AbortReply.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbortReply::release_result() {
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbortReply::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:backend.AbortReply.result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace backend

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_backend_2eproto__INCLUDED
