OBJECTIVE
=========

Efficient Logging in Distributed Storage: Write-ahead logging is
fundamental in many distributed protocols. In this project, you'll build some
simple distributed protocols (e.g., 2pc) atop modern infrastructure and
measure the costs of logging; how effectively do modern file systems (e.g.,
XFS, ext4), atop SSDs or hard disks, support logging? What are the costs? A
good project will build a simple prototype and measure its performance
carefully; a really good project will go deeper here, perhaps building support
for distributed protocols into the local storage system directly.


PREREQUISITES:

You need both GRPC and PROTOBUF to be able to build the code.
You will need to change the Makefile to correctly link the GRPC and PROTOBUF libraries.

HOW TO RUN:

There are two binaries and one example usage:

greeter_server : this is the coordinator code that will accept local RPCs for the key-value operations from a client process (e.g. hello)
backend_store : this is the daemon running on backend store servers.

hello: example usage. This is the client program using the coordinator services of greeter_server.


You can run greeter_server on a single node as follows:

./greeter_server <recovery_mode>

recovery_mode: 0 or 1. 
               0 indicates that the log will *NOT* be read for recovery.
               1 indicates that the log will be read for recovery.



You can then run the backend_store on as many nodes as you want:

./backend_store <recovery_mode> <greeter_server_hostname_or_ip> <backend_store_port_num>

recovery_mode: 0 or 1. 
               0 indicates that the log will *NOT* be read for recovery.
               1 indicates that the log will be read for recovery.

greeter_server_hostname_or_ip: This is the hostname or ip-address of the single node
                               which is running the greeter_server (i.e. the coordinator and the client code).

backend_store_port_num: The port number that you want to use on a backend_store.



Then, see the example, hello. You can run "hello" on the same node as you are running the "greeter_server".
The "hello" program uses the Store, Fetch and Delete APIs:

./hello






