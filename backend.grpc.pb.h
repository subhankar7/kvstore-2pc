// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: backend.proto
#ifndef GRPC_backend_2eproto__INCLUDED
#define GRPC_backend_2eproto__INCLUDED

#include "backend.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace backend {

class Backend GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Fetch(::grpc::ClientContext* context, const ::backend::BackendFetchRequest& request, ::backend::BackendFetchReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::BackendFetchReply>> AsyncFetch(::grpc::ClientContext* context, const ::backend::BackendFetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::BackendFetchReply>>(AsyncFetchRaw(context, request, cq));
    }
    virtual ::grpc::Status Prepare(::grpc::ClientContext* context, const ::backend::PrepareRequest& request, ::backend::PrepareReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::PrepareReply>> AsyncPrepare(::grpc::ClientContext* context, const ::backend::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::PrepareReply>>(AsyncPrepareRaw(context, request, cq));
    }
    virtual ::grpc::Status Commit(::grpc::ClientContext* context, const ::backend::CommitRequest& request, ::backend::CommitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::CommitReply>> AsyncCommit(::grpc::ClientContext* context, const ::backend::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::CommitReply>>(AsyncCommitRaw(context, request, cq));
    }
    virtual ::grpc::Status Abort(::grpc::ClientContext* context, const ::backend::AbortRequest& request, ::backend::AbortReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::AbortReply>> AsyncAbort(::grpc::ClientContext* context, const ::backend::AbortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::AbortReply>>(AsyncAbortRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::BackendFetchReply>* AsyncFetchRaw(::grpc::ClientContext* context, const ::backend::BackendFetchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::PrepareReply>* AsyncPrepareRaw(::grpc::ClientContext* context, const ::backend::PrepareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::CommitReply>* AsyncCommitRaw(::grpc::ClientContext* context, const ::backend::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::AbortReply>* AsyncAbortRaw(::grpc::ClientContext* context, const ::backend::AbortRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status Fetch(::grpc::ClientContext* context, const ::backend::BackendFetchRequest& request, ::backend::BackendFetchReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::BackendFetchReply>> AsyncFetch(::grpc::ClientContext* context, const ::backend::BackendFetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::BackendFetchReply>>(AsyncFetchRaw(context, request, cq));
    }
    ::grpc::Status Prepare(::grpc::ClientContext* context, const ::backend::PrepareRequest& request, ::backend::PrepareReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::PrepareReply>> AsyncPrepare(::grpc::ClientContext* context, const ::backend::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::PrepareReply>>(AsyncPrepareRaw(context, request, cq));
    }
    ::grpc::Status Commit(::grpc::ClientContext* context, const ::backend::CommitRequest& request, ::backend::CommitReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::CommitReply>> AsyncCommit(::grpc::ClientContext* context, const ::backend::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::CommitReply>>(AsyncCommitRaw(context, request, cq));
    }
    ::grpc::Status Abort(::grpc::ClientContext* context, const ::backend::AbortRequest& request, ::backend::AbortReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::AbortReply>> AsyncAbort(::grpc::ClientContext* context, const ::backend::AbortRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::AbortReply>>(AsyncAbortRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::backend::BackendFetchReply>* AsyncFetchRaw(::grpc::ClientContext* context, const ::backend::BackendFetchRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::backend::PrepareReply>* AsyncPrepareRaw(::grpc::ClientContext* context, const ::backend::PrepareRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::backend::CommitReply>* AsyncCommitRaw(::grpc::ClientContext* context, const ::backend::CommitRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::backend::AbortReply>* AsyncAbortRaw(::grpc::ClientContext* context, const ::backend::AbortRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_Fetch_;
    const ::grpc::RpcMethod rpcmethod_Prepare_;
    const ::grpc::RpcMethod rpcmethod_Commit_;
    const ::grpc::RpcMethod rpcmethod_Abort_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status Fetch(::grpc::ServerContext* context, const ::backend::BackendFetchRequest* request, ::backend::BackendFetchReply* response);
    virtual ::grpc::Status Prepare(::grpc::ServerContext* context, const ::backend::PrepareRequest* request, ::backend::PrepareReply* response);
    virtual ::grpc::Status Commit(::grpc::ServerContext* context, const ::backend::CommitRequest* request, ::backend::CommitReply* response);
    virtual ::grpc::Status Abort(::grpc::ServerContext* context, const ::backend::AbortRequest* request, ::backend::AbortReply* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestFetch(::grpc::ServerContext* context, ::backend::BackendFetchRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::BackendFetchReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestPrepare(::grpc::ServerContext* context, ::backend::PrepareRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::PrepareReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestCommit(::grpc::ServerContext* context, ::backend::CommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::CommitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestAbort(::grpc::ServerContext* context, ::backend::AbortRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::AbortReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace backend


#endif  // GRPC_backend_2eproto__INCLUDED
